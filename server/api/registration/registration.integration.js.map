{"version":3,"sources":["../../../../server/api/registration/registration.integration.js"],"names":["app","require","newRegistration","describe","registrations","beforeEach","done","get","expect","end","err","res","body","it","to","be","instanceOf","Array","post","send","name","info","equal","registration","_id","afterEach","updatedRegistration","put","delete"],"mappings":"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","file":"registration.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newRegistration;\n\ndescribe('Registration API:', function() {\n\n  describe('GET /api/registrations', function() {\n    var registrations;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/registrations')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          registrations = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      expect(registrations).to.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/registrations', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/registrations')\n        .send({\n          name: 'New Registration',\n          info: 'This is the brand new registration!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newRegistration = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created registration', function() {\n      expect(newRegistration.name).to.equal('New Registration');\n      expect(newRegistration.info).to.equal('This is the brand new registration!!!');\n    });\n\n  });\n\n  describe('GET /api/registrations/:id', function() {\n    var registration;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/registrations/' + newRegistration._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          registration = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      registration = {};\n    });\n\n    it('should respond with the requested registration', function() {\n      expect(registration.name).to.equal('New Registration');\n      expect(registration.info).to.equal('This is the brand new registration!!!');\n    });\n\n  });\n\n  describe('PUT /api/registrations/:id', function() {\n    var updatedRegistration;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/registrations/' + newRegistration._id)\n        .send({\n          name: 'Updated Registration',\n          info: 'This is the updated registration!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedRegistration = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedRegistration = {};\n    });\n\n    it('should respond with the updated registration', function() {\n      expect(updatedRegistration.name).to.equal('Updated Registration');\n      expect(updatedRegistration.info).to.equal('This is the updated registration!!!');\n    });\n\n  });\n\n  describe('DELETE /api/registrations/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/registrations/' + newRegistration._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when registration does not exist', function(done) {\n      request(app)\n        .delete('/api/registrations/' + newRegistration._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}