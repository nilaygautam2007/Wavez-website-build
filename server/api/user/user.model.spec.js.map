{"version":3,"sources":["../../../../server/api/user/user.model.spec.js"],"names":["user","genUser","provider","name","email","password","describe","before","remove","beforeEach","afterEach","it","expect","find","exec","to","eventually","have","length","save","then","userDup","be","rejected","undefined","fulfilled","authenticate","true","not","u"],"mappings":"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","file":"user.model.spec.js","sourcesContent":["'use strict';\n\nimport app from '../..';\nimport User from './user.model';\nvar user;\nvar genUser = function() {\n  user = new User({\n    provider: 'local',\n    name: 'Fake User',\n    email: 'test@example.com',\n    password: 'password'\n  });\n  return user;\n};\n\ndescribe('User Model', function() {\n  before(function() {\n    // Clear users before testing\n    return User.remove();\n  });\n\n  beforeEach(function() {\n    genUser();\n  });\n\n  afterEach(function() {\n    return User.remove();\n  });\n\n  it('should begin with no users', function() {\n    return expect(User.find({}).exec()).to\n      .eventually.have.length(0);\n  });\n\n  it('should fail when saving a duplicate user', function() {\n    return expect(user.save()\n      .then(function() {\n        var userDup = genUser();\n        return userDup.save();\n      })).to.be.rejected;\n  });\n\n  describe('#email', function() {\n    it('should fail when saving with a blank email', function() {\n      user.email = '';\n      return expect(user.save()).to.be.rejected;\n    });\n\n    it('should fail when saving with a null email', function() {\n      user.email = null;\n      return expect(user.save()).to.be.rejected;\n    });\n\n    it('should fail when saving without an email', function() {\n      user.email = undefined;\n      return expect(user.save()).to.be.rejected;\n    });\n\n    describe('given user provider is google', function() {\n      beforeEach(function() {\n        user.provider = 'google';\n      });\n\n      it('should succeed when saving without an email', function() {\n        user.email = null;\n        return expect(user.save()).to.be.fulfilled;\n      });\n    });\n\n    describe('given user provider is facebook', function() {\n      beforeEach(function() {\n        user.provider = 'facebook';\n      });\n\n      it('should succeed when saving without an email', function() {\n        user.email = null;\n        return expect(user.save()).to.be.fulfilled;\n      });\n    });\n\n    describe('given user provider is github', function() {\n      beforeEach(function() {\n        user.provider = 'github';\n      });\n\n      it('should succeed when saving without an email', function() {\n        user.email = null;\n        return expect(user.save()).to.be.fulfilled;\n      });\n    });\n  });\n\n  describe('#password', function() {\n    it('should fail when saving with a blank password', function() {\n      user.password = '';\n      return expect(user.save()).to.be.rejected;\n    });\n\n    it('should fail when saving with a null password', function() {\n      user.password = null;\n      return expect(user.save()).to.be.rejected;\n    });\n\n    it('should fail when saving without a password', function() {\n      user.password = undefined;\n      return expect(user.save()).to.be.rejected;\n    });\n\n    describe('given the user has been previously saved', function() {\n      beforeEach(function() {\n        return user.save();\n      });\n\n      it('should authenticate user if valid', function() {\n        expect(user.authenticate('password')).to.be.true;\n      });\n\n      it('should not authenticate user if invalid', function() {\n        expect(user.authenticate('blah')).to.not.be.true;\n      });\n\n      it('should remain the same hash unless the password is updated', function() {\n        user.name = 'Test User';\n        return expect(user.save()\n          .then(function(u) {\n            return u.authenticate('password');\n          })).to.eventually.be.true;\n      });\n    });\n\n    describe('given user provider is google', function() {\n      beforeEach(function() {\n        user.provider = 'google';\n      });\n\n      it('should succeed when saving without a password', function() {\n        user.password = null;\n        return expect(user.save()).to.be.fulfilled;\n      });\n    });\n\n    describe('given user provider is facebook', function() {\n      beforeEach(function() {\n        user.provider = 'facebook';\n      });\n\n      it('should succeed when saving without a password', function() {\n        user.password = null;\n        return expect(user.save()).to.be.fulfilled;\n      });\n    });\n\n    describe('given user provider is github', function() {\n      beforeEach(function() {\n        user.provider = 'github';\n      });\n\n      it('should succeed when saving without a password', function() {\n        user.password = null;\n        return expect(user.save()).to.be.fulfilled;\n      });\n    });\n  });\n\n});\n"]}